#!/bin/bash

#echo 'dotfiles - Environment bootstrapper - Tim Brooks - http://skoorb.net'
_name=${0##*/}
_version=$(cd $HOME/.dotfiles; git log -1 --pretty="format:%h: %ai")

function usage () {
  echo "${_name} - Tim Brooks 2013 <brooks@skoorb.net>"
  echo "Usage: ${_name} [option]... [action]... [file]..."
  echo "Manage dotfiles repository"
  echo
  echo "Actions: pull - pull updates from attached repos"
  echo "         push - push updates to attached repos"
  echo "         sync - sync dotfiles to this repo"
  echo "         add - add a dotfile to this repo"
  echo
  echo "Options:"
  echo "  -h, --help              this help message"
  echo "  -o, --overwrite         overwrite present dotfiles"
  echo "  -c, --compare           compare present dotfiles to their replacement"
  echo "  -v, --verbose           verbose information about actions performed"
  echo "  -m, --message           commit message used when adding or syncing"
  echo "  -q, --quiet             suppress warnings"
  echo
  echo "      --version           print version: ${_version}"
}

# Execute getopt
if ! ARGS=$(getopt -o m:hoqvdc -l "message:,help,overwrite,quiet,verbose,dryrun,compare,version" -n "getopt.sh" -- "$@"); then
  exit 1
fi

eval set -- "$ARGS";

while true; do
  case "$1" in
    -m|--message)
      shift;
      if [ -n "$1" ]; then
        message=$1
        shift;
      fi
      ;;
    -h|--help)
      shift;
      actions=help
      ;;
    --version)
      shift;
      actions=version
      ;;
    -o|--overwrite)
      shift;
      overwrite=true
      ;;
    -q|--quiet)
      shift;
      quiet=true
      ;;
    -v|--verbose)
      shift;
      verbose=true
      ;;
    -d|--dryrun)
      shift;
      dryrun=true
      ;;
    -c|--compare)
      shift;
      compare=true
      ;;
    --)
      shift;
      break;
      ;;
  esac
done

# Loop over cmd line tokens
args=$@
while true; do
  current=${args%% *}
  args=${args#$current}
  args=${args# }
  if [ "$current" == "add" ]; then
    value=${args%% *}
    if [ "$value" == "" ]; then
      echo "${_name}: add action requires filename"
      echo
      usage
      exit 1
    fi
    args=${args#$value}
    if [ ! ${files} ]; then
      actions=("${actions[@]}" "$current")
    fi
    files=("${files[@]}" "$value")
  else
    actions=("${actions[@]}" "$current")
  fi
  if [ "$args" == "$current" ]; then
    break
  fi
done

if [ ! $actions ]; then
  usage
  exit 1
fi

function action () {
    if [ $dryrun ]; then
        log skipping action $@
    else
        if eval $@; then
            log $@
        else
            warn failed command: $@
        fi
    fi
}

function log () {
    if [ $verbose ]; then
        echo $@
    fi
}

function warn () {
    if [ !$quiet ]; then
        echo Warning $@
    fi
}

function link () {
    target_path=$1
    link_path=$2
    if [ -L $link_path ]; then
        old_path=$(ls -l $link_path)
        old_path=${old_path##* }
        if [ "$old_path" == "$target_path" ]; then
            log $link_path linked
        else
            if [ $overwrite ];then
                log updating link $link_path
                action rm -rf $link_path
                action ln -s $target_path $link_path
            else
                warn pre-existing link $link_path
            fi
        fi
    elif [ -e $link_path ]; then
        if [ $overwrite ]; then
            log overwriting $link_path
            action rm -rf $link_path
            action ln -s $target_path $link_path
        elif [ $compare ]; then
            diff -s $target_path $link_path
        else
            warn pre-existing file $link_path
        fi
    else
        action ln -s $target_path $link_path
    fi
}

for action in ${actions[@]}; do
  if [ "$action" == "help" ]; then
    usage
    exit 0
  elif [ "$action" == "version" ]; then
    echo "${_name} version: ${_version}"
    exit 0
  elif [ "$action" == "push" ]; then
    cd ~/.dotfiles
    if [ "$message" ]; then
      if [ ${#message} -gt 50 ]; then
        warn "specified message is too long"
        exit 1
      fi
      action git commit -am "\"$message\""
    else
      action git commit -am "\"File update @${HOSTNAME%%.*}\""
    fi
    remotes=$(git remote)
    branch=$(git rev-parse --abbrev-ref HEAD)
    for remote in $remotes; do
      action git push $remote $branch
    done
  elif [ "$action" == "sync" ]; then
    targets=$(cd ~/.dotfiles; find home -type f -printf "%P\n")
    for target in ${targets}; do
      target_path=~/.dotfiles/home/${target}
      link_path=~/${target}
      if [ -d "${link_path%/*}" ]; then
        log "${link_path%/*} exists"
      elif [ -e "${link_path%/*}" ]; then
        warn "${link_path%/*} is not a directory"
      else
        action mkdir -p ${link_path%/*}
      fi
      link $target_path $link_path
    done
  elif [ "$action" == "add" ]; then
    for file in ${files[@]}; do
      loc="home"
      file_name=~/.dotfiles/${loc}/${file##$HOME/}
      if [ -d "${file_name%/*}" ]; then
        log "${file_name%/*} exists"
      elif [ -e "${file_name%/*}" ]; then
        warn "${file_name%/*} is not a directory"
      else
        action mkdir -p ${file_name%/*}
      fi
      action mv ${file} ${file_name}
      cd ~/.dotfiles
      action git add ${file_name}
    done
    if [ $message ]; then
      if [ ${#@} -gt 50 ]; then
        warn "specified message is too long"
        exit 1
      fi
      action git commit -m "\"$message\""
    elif [ ${#files[@]} == 1 ]; then
      action git commit -m "\"Added ${files[@]} from ${HOSTNAME%%.*}\""
    else
      action git commit -m "\"Added multiple files @${HOSTNAME%%.*}\""
    fi
  elif [ "$action" == "diff" -o "$action" == "pull" -o "$action" == "status" ]; then
    cd ~/.dotfiles
    action git $action
  else
    echo "${_name}: unrecognised action $action"
    echo
    usage
  fi
done
