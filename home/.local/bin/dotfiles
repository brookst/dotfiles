#!/bin/bash

#echo 'dotfiles - Environment bootstrapper - Tim Brooks - http://skoorb.net'
DOTFILES="${HOME}/.dotfiles"
BASE="$DOTFILES/home"
_name=${0##*/}
_version=$(cd "$DOTFILES"; git log -1 --pretty="format:%ai %h" "home/.local/bin/dotfiles")

usage () {
  echo "${_name} - Tim Brooks 2013 <brooks@skoorb.net>"
  echo "Usage: ${_name} [option]... [command]... [file]..."
  echo "Manage dotfiles repository"
  echo
  echo "Commmands: pull - pull updates from attached repos"
  echo "           push - push updates to attached repos"
  echo "           send - commit updates and push them"
  echo "           sync - sync dotfiles to this repo"
  echo "           add - add a dotfile to this repo and sync it"
  echo
  echo "Options:"
  echo "  -h, --help              this help message"
  echo "  -o, --overwrite         overwrite present dotfiles"
  echo "  -c, --compare           compare present dotfiles to their replacement"
  echo "  -v, --verbose           verbose information about actions performed"
  echo "  -m, --message           commit message used when adding or syncing"
  echo "  -q, --quiet             suppress warnings"
  echo
  echo "      --version           print version: ${_version}"
}

YELLOW=$'\033[0;33m'
NO_COLOUR=$'\033[0m'

# Execute getopt
if ! ARGS=$(getopt -o m:hoqvdc -l "message:,help,overwrite,quiet,verbose,dryrun,compare,version" -n "getopt.sh" -- "$@"); then
  exit 1
fi

eval set -- "$ARGS"

while true; do
  case "$1" in
    -m|--message)
      shift;
      if [ -n "$1" ]; then
        message=$1
        shift;
      fi
      ;;
    -h|--help)
      shift;
      commands=help
      ;;
    --version)
      shift;
      commands=version
      ;;
    -o|--overwrite)
      shift;
      overwrite=true
      ;;
    -q|--quiet)
      shift;
      quiet=true
      ;;
    -v|--verbose)
      shift;
      verbose=true
      ;;
    -d|--dryrun)
      shift;
      dryrun=true
      ;;
    -c|--compare)
      shift;
      compare=true
      ;;
    --)
      shift;
      break;
      ;;
  esac
done

# Loop over cmd line tokens
current="none"
for arg do
  if [ "$current" == "add" ]; then
    files=("${files[@]}" "$(readlink -f "${arg}")")
  elif [ "$arg" == "add" ]; then
    current="add"
    commands=("${commands[@]}" "add")
  else
    commands=("${commands[@]}" "$arg")
  fi
done

if [ "${#files[@]}" == 0 -a "$current" == "add" ]; then
  echo "${_name}: add command requires filename"
  echo
  usage
  exit 1
fi

if [ ! "${commands[@]}" ]; then
  usage
  exit 1
fi

is () {
#Do a bunch of comparisons; e.g. 'is bravo in alfa,bravo,charlie'
    [ "$2" == "in" ] || exit 1
    for cmp in $(echo "$3"|tr ',' ' '); do
        [ "$1" == "$cmp" ] && return 0
    done
    return 1
}

action () {
    if [ $dryrun ]; then
        echo "skipping action $@"
    else
        "$@"
        if [ $? == 0 ]; then
            log "$@"
        else
            warn "failed command: $@"
        fi
    fi
}

stat () {
    files=$(git status -s)                  #get array of all changes
    if [ "${#files}" == "0" ]
    then                                    #0 changes - signal there's nothing to do here
        echo "no files to commit" | log
        return 1
    else
        return 0
    fi
}

log () {
    if [ $verbose ]; then
        echo "$@"
    fi
}

warn () {
    if [ ! $quiet ]; then
        echo "${YELLOW}Warning ${@}${NO_COLOUR}"
    fi
}

link () {
    target_path=$1
    link_path=$2
    # Pull out link targets non-recursively
    if [ -L "$link_path" ]; then
        old_path="$(file -h "$link_path" | sed -es/^.*\`// -es/\'//)"

        if [ "$old_path" == "$target_path" ]; then
            : log "$link_path linked"
        else
            if [ $overwrite ];then
                log "updating link $link_path"
                action rm -rf "$link_path"
                action ln -s "$target_path" "$link_path"
            else
                warn pre-existing link "$link_path"
            fi
        fi
    elif [ -e "$link_path" ]; then
        if [ $overwrite ]; then
            warn overwriting "$link_path"
            action rm -rf "$link_path"
            action ln -s "$target_path" "$link_path"
        elif [ $compare ]; then
            diff -s "$target_path" "$link_path"
        else
            warn pre-existing file "$link_path"
        fi
    else
        action ln -s "$target_path" "$link_path"
    fi
}

for command in ${commands[*]}; do
  log "command: $command"
  if [ "$command" == "help" ]; then
    usage
    exit 0
  elif [ "$command" == "version" ]; then
    echo "${_name} version: ${_version}"
    exit 0
  elif [ "$command" == "push" ]; then
    cd ~/.dotfiles
    remotes=$(git remote)
    branch=$(git rev-parse --abbrev-ref HEAD)
    for remote in $remotes; do
      action git push "$remote" "$branch"
    done
  elif [ "$command" == "send" ]; then
    cd ~/.dotfiles
    if stat; then
        if [ "$message" ]; then
          if [ ${#message} -gt 50 ]; then
            warn "specified message is too long"
            exit 1
          fi
          action git commit -am "$message"
        else
          action git commit -am "File update @${HOSTNAME%%.*}"
        fi
    fi
    remotes=$(git remote)
    branch=$(git rev-parse --abbrev-ref HEAD)
    for remote in $remotes; do
      action git push "$remote" "$branch"
    done
  elif [ "$command" == "sync" ]; then
    while IFS= read -r -d $'\0' file; do
        targets[i++]="$file"
    done < <(cd ~/.dotfiles; find -L home -type f ! -regex '.*\.sw.' -print0)

    for target in "${targets[@]}"; do
      target_path="${HOME}/.dotfiles/${target}"
      link_path="${HOME}/${target#home/}"
      if [ -d "${link_path%/*}" ]; then
        : log "${link_path%/*} exists"
      elif [ -e "${link_path%/*}" ]; then
        warn "${link_path%/*} is not a directory"
      else
        action mkdir -p "${link_path%/*}"
      fi
      link "$target_path" "$link_path"
    done
  elif [ "$command" == "add" ]; then
    for file in "${files[@]}"; do
      if [ "${file:0:${#DOTFILES}}" == "$DOTFILES" ]; then
        log "file $file already tracked in dotfiles"
        cd ~/.dotfiles
        action git add "${file}"
        continue
      fi
      file_name="${BASE}/${file##$HOME/}"
      if [ -d "${file_name%/*}" ]; then
        log "${file_name%/*} exists"
      elif [ -e "${file_name%/*}" ]; then
        warn "${file_name%/*} is not a directory"
      else
        action mkdir -p "${file_name%/*}"
      fi
      action mv "${file}" "${file_name}"
      link "$file_name" "$file"
      cd ~/.dotfiles
      action git add "${file_name}"
    done
    if [ "$message" ]; then
      if [ ${#@} -gt 50 ]; then
        warn "specified message is too long"
        exit 1
      fi
      action git commit -m "$message"
    elif [ ${#files[@]} == 1 ]; then
      if [ "${files[0]:0:${#DOTFILES}}" == "$DOTFILES" ]; then
        action git commit -m "File update @${HOSTNAME%%.*}"
      else
        action git commit -m "Added ${files[@]##$HOME/} from ${HOSTNAME%%.*}"
      fi
    else
      action git commit -m "Added multiple files @${HOSTNAME%%.*}"
    fi
  elif is "$command" in "pull"; then
    cd ~/.dotfiles
    action git $command
  elif is "$command" in "diff,pull,status,show" || git help $command &>/dev/null; then
    temp=${commands[*]}
    cd ~/.dotfiles
    action git $command ${temp#*$command}
    exit 0
  else
    echo "${_name}: unrecognised command $command"
    echo
    usage
    exit 1
  fi
done
