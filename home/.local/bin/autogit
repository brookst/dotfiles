#!/bin/bash
# autogit - automatic git commit generator
# Tim Brooks <brooks@cern.ch>

_name=${0##*/}
_version=$(cd "$HOME/.dotfiles"; git log -1 --pretty="format:%ai %h" "home/.local/bin/autogit")

function usage () {
    if [ "$1" == 0 ]; then
    echo "${_name} - Tim Brooks 2014 <brooks@skoorb.net>"
    fi
    echo "Usage: ${_name} [option]... [repo_path]"
    echo "Automatically update a git repo"
    echo
    echo "Options:"
    echo "  -h, --help              this help message"
    echo "  -v, --verbose           echo messages to terminal"
    echo "  -r, --remote=origin     name of git remote repo"
    echo "  -b, --branch=master     branch to push"
    echo
    echo "  -f, --fetch             always perform pull"
    echo "  -c, --commit            only perform commit"
    echo "  -p, --push              only perform push"
    echo "  -g, --pull              only perform pull"
    echo
    echo "      --version           print version: ${_version}"
    exit "$1"
}

function version () {
    echo "${_name} version: ${_version}"
    exit 0
}

repo_path=${PWD}
repo_remote="origin"
repo_branch="master"
verbose=false
debug=false
always_pull=false
only_commit=false
only_push=false
only_pull=false

if ! ARGS=$(getopt -o hvdfcpgr:b: -l help,verbose,debug,fetch,commit,push,pull,remote:,branch:,version -- "$@"); then
    exit 1
fi
eval set -- "$ARGS"

while [ $# -gt 0 ]
do
    case $1 in
    -h|--help) usage 0 ;;
    -v|--verbose) verbose=true ;;
    --version) version ;;
    -d|--debug) debug=true ;;
    -f|--fetch) always_pull=true ;;
    -c|--commit) only_commit=true ;;
    -p|--push) only_push=true ;;
    -g|--pull) only_pull=true ;;
    # for options with required arguments, an additional shift is required
    -r|--remote) eval repo_remote="$2" ; shift;;
    -b|--branch) eval repo_branch="$2" ; shift;;
    (--) if [ -n "$2" ]; then
        repo_path=${2} ; shift
        fi; break;;
    (-*) echo "${_name}: error - unrecognised option $1" 2>&1; usage 1;;
    (*) break;;
    esac
    shift
done

#get keychain info if available
if [ -f "${HOME}/.keychain/${HOSTNAME}-sh" ]; then
    source "${HOME}/.keychain/${HOSTNAME}-sh"
fi

#get ssh-agent info if available
if [ -f "${HOME}/.ssh/environment" ]; then
    source "${HOME}/.ssh/environment"
elif [ -f "${HOME}/.ssh/${HOSTNAME%%.*}.environment" ]; then
    source "${HOME}/.ssh/${HOSTNAME%%.*}.environment"
fi

function log () {
    #read lines as they are emitted from the preceding command
    while read msg; do
        if [ "$verbose" == true ] && [ -n "${msg}" ]; then
            echo "${msg}"
        fi
    done
}

function log_debug () {
    #read lines as they are emitted from the preceding command
    while read msg; do
        if [ "$debug" == true ]&& [ -n "${msg}" ]; then
            echo "${msg}"
        fi
    done
}

function stat () {
    echo "AG: stat function" | log_debug
    files=$(git status -s)                  #get array of all changes
    if [ "${#files}" == "0" ]
    then                                    #0 changes - signal there's nothing to do here
        echo "No files to commit" | log
        return 1
    else
        return 0
    fi
}

function ahead () {
    echo "AG: ahead function" | log_debug
    # Check git status output to see if we are ahead of upstream
    if git status | grep ahead &>/dev/null; then
        return 0
    else
        return 1
    fi
}

function pull () {
    echo "AG: pull function" | log_debug
    if [ "$verbose" == true ]; then
        git pull ${repo_remote} ${repo_branch} 2>&1 | log
    else
        git pull --quiet ${repo_remote} ${repo_branch} 2>&1 | log
    fi
    code=$?
    if [[ "${code}" != "0" ]]; then
        echo "Error ${code} occurred while pulling"
        exit $code
    fi
}

function add () {
    echo "AG: add function" | log_debug
    git add --all 2>&1 | log
    code=$?
    if [[ "${code}" != "0" ]]; then
        echo "Error ${code} occurred while adding"
        exit $code
    fi
}

function commit () {
    echo "AG: commit function" | log_debug
    git commit -m "Auto update @${HOSTNAME}" 2>&1 | log
    code=$?
    if [[ "${code}" != "0" ]]; then
        echo "Error ${code} occurred while committing"
        exit $code
    fi
}

function push () {
    echo "AG: push function" | log_debug
    git push -q ${repo_remote} ${repo_branch} 2>&1 | log
    code=$?
    if [[ "${code}" != "0" ]]; then
        echo "Error ${code} occurred while pushing"
        exit $code
    else
        echo "Pushed to remote" | log_debug
    fi
}

function main () {
    echo "AG: main function" | log_debug
    if ! eval cd "${repo_path}"       #eval strips single quotes
    then                            #something went wrong
        echo "${_name}: Path ${repo_path} not found"
        exit 1
    fi
    if [ "$only_commit" == true ] || [ "$only_push" == true ] || [ "$only_pull" == true ]
    then                            #Just perform the selected action(s)
        echo "AG: forced action" | log_debug
        if [ "$only_pull" == true ]; then
            pull
        fi
        if [ "$only_commit" == true ]; then
            if stat; then
                add
                commit
            else                    #this is an error since commit was specifically asked for
                exit 1
            fi
        fi
        if [ "$only_push" == true ]; then
            push
        fi
        exit 0
    fi
    if stat; then
        echo "AG: commit branch" | log_debug
        add
        commit
        pull                        #commit first-then pull with rebase on top
        push
    elif ahead; then
        echo "AG: update branch" | log_debug
        pull
        push
    else
        echo "AG: fetch branch" | log_debug
        if [ "$always_pull" == true ]
        then                        #pull despite there being no new files
            pull
        fi
    fi
}

echo "Started @ $(date)" | log_debug
env | log_debug
main
echo "Ended @ $(date)" | log_debug
echo | log_debug
