#!/usr/bin/env bash
# Get current swap usage for all running processes
# Tim Brooks 21/11/2016
# Erik Ljungstrom 27/05/2011

_name=${0##*/}

usage () {
    if [ "$1" == 0 ]; then
        echo "$_name: Sum program swap allocations"
    fi
    echo "
Usage:
 $_name [options]

    -h, --help              this help message
    -f, --full              don'\''t try to truncate paths to basenames
    -t, --truncate COLS     truncate output to COLS columns
        --si                use powers of 1000 not 1024
    "
    exit "$1"
}

if ! ARGS=$(getopt -o hft: --long help,full,truncate:,si -n "$_name" -- "$@"); then
    # echo "Bad option" >&2
    usage 1
fi

# echo "ARGS: $ARGS"
eval set -- "$ARGS"

PAD=".$(( $(tput cols) - 31 ))" # printf format is 36chars
POWER=1024
path=true

while true; do
  case "$1" in
    -h | --help) usage 0 ;;
    -f | --full) shift; path=false ;;
    --si) shift; POWER=1000 ;;
    -t | --truncate) shift
        if [ "$1" == "0" ]; then
            PAD=""
        else
            PAD=".$1"
        fi; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

regex="${1}"

while read -r line; do
    PID=${line#* }
    SUM=${line% *}
    # PROGNAME=$(ps -p "$PID" -o comm --no-headers)
    # PROGNAME=$(head -zn1 "/proc/$PID/cmdline" 2>/dev/null | xargs -0l basename -- 2>/dev/null)
    if [[ ! -f "/proc/$PID/cmdline" ]]; then
        continue
    fi
    mapfile -d '' -t PROGNAME < "/proc/${PID}/cmdline"
    # printf "PID %5d - Swap used: %7d kB - %${PAD}s\n" "$PID" "$SUM" "${PROGNAME[*]}"

    if [ $path == true ]; then
        for i in $(seq ${#PROGNAME[@]}); do
            ((i=i-1))
            if [[ "${PROGNAME[i]}" =~ / ]]; then
                base=$(basename "${PROGNAME[i]}" 2>/dev/null)
                baseok=$?
                if [[ "${PROGNAME[i]}" =~ = ]]; then
                    base="${PROGNAME[i]%%=*}=$(basename -- "${PROGNAME[i]#*=}" 2>/dev/null)"
                    baseok=$?
                fi
                if [ $baseok == 0 ]; then
                    PROGNAME[i]="$base"
                fi
            fi
            # printf "PROGNAME[$i] %d: %s %s\n" $baseok "$base" "${PROGNAME[i]}"
        done
    fi

    if [[ ${PROGNAME[0]} =~ $regex ]]; then
        if [[ $SUM -lt $POWER ]]; then
            printf "PID %6d - swap: %4d kB - %${PAD}s\\n" "$PID" "$SUM" "${PROGNAME[*]}"
        else
            printf "PID %6d - swap: %4d MB - %${PAD}s\\n" "$PID" "$((SUM / POWER))" "${PROGNAME[*]}"
        fi
    else
        echo "Skipped"
    fi
    (( OVERALL=OVERALL+SUM ))
done < <(grep VmSwap: /proc/[1-9]*/status 2>/dev/null \
        | awk '{SUM[$1] += $2} END {for (proc in SUM) print SUM[proc], proc}' \
        | sed 's/\/proc\/\([0-9]\+\)\/status:VmSwap:/\1/' \
        | sort -n)
# done < <(grep Swap: /proc/[1-9]*/smaps 2>/dev/null \
#         | awk '{SUM[$1] += $2} END {for (proc in SUM) print SUM[proc], proc}' \
#         | sed 's/\/proc\/\([0-9]\+\)\/smaps:Swap:/\1/' \
#         | sort -n)

USED=$(free | sed -n 's/^Swap:\s*[0-9]\+\s\+\([0-9]\+\)\s.*$/\1/p')
TOTAL=$(free | sed -n 's/^Swap:\s*\([0-9]\+\)\s.*$/\1/p')
(( DIFF=USED - OVERALL ))
(( PERCENT=100 * USED / TOTAL ))
(( TOTAL=TOTAL / POWER ))
printf " non-process swap: %4d MB\\n" "$((DIFF / POWER))"
if [[ $USED -lt $POWER ]]; then
    printf "     Overall swap: %4d kB / %4d MB (%2d%%)\\n" "$USED" "$TOTAL" "$PERCENT"
else
    printf "     Overall swap: %4d MB / %4d MB (%2d%%)\\n" $((USED / POWER)) "$TOTAL" "$PERCENT"
fi

# # Get current swap usage for all running processes
# # Erik Ljungstrom 27/05/2011
# SUM=0
# OVERALL=0
# for DIR in `find /proc/ -maxdepth 1 -type d | egrep "^/proc/[0-9]"` ; do
# PID=`echo $DIR | cut -d / -f 3`
# PROGNAME=`ps -p $PID -o comm --no-headers`
# for SWAP in `grep Swap $DIR/smaps 2>/dev/null| awk '{ print $2 }'`
# do
# let SUM=$SUM+$SWAP
# done
# printf "PID= %5d - Swap used: %6d kB - ($PROGNAME )\n" "$PID" $SUM
# let OVERALL=$OVERALL+$SUM
# SUM=0

# done
# echo "Overall swap used: $OVERALL kB"
